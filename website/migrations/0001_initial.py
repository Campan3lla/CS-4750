# Generated by Django 4.2.2 on 2023-07-12 12:43

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import website.models.core_models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UniversityMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=True)),
                ('is_instructor', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assignment_name', models.CharField(max_length=64)),
            ],
            bases=(website.models.core_models.AutoValidateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            bases=(website.models.core_models.AutoValidateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_subject', models.CharField(max_length=8)),
                ('course_catalog_number', models.CharField(max_length=4)),
            ],
            bases=(website.models.core_models.AutoValidateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CourseTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_topic_name', models.CharField(max_length=64)),
            ],
            bases=(website.models.core_models.AutoValidateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_name', models.CharField(max_length=32, unique=True)),
            ],
            bases=(website.models.core_models.AutoValidateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OfficeHourQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ohq_student_comment', models.CharField(blank=True, max_length=256)),
                ('ohq_instructor_comment', models.CharField(blank=True, max_length=256)),
                ('ohq_status', models.CharField(choices=[('PENDING', 'Pending'), ('UNANSWERED', 'Unanswered'), ('ANSWERED', 'Answered')], default='PENDING', max_length=16)),
                ('ohq_opened_at', models.DateTimeField()),
                ('ohq_closed_at', models.DateTimeField(blank=True, null=True)),
            ],
            bases=(website.models.core_models.AutoValidateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OfficeHourSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ohs_start_time', models.DateTimeField()),
                ('ohs_end_time', models.DateTimeField()),
                ('ohs_status', models.CharField(choices=[('OPEN', 'open'), ('AWAY', 'away'), ('CLOSED', 'closed')], default='OPEN', max_length=6)),
            ],
            bases=(website.models.core_models.AutoValidateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reg_type', models.CharField(choices=[('STUD', 'Student'), ('TA', 'Teaching Assistant'), ('PROF', 'Professor')], max_length=4)),
            ],
            bases=(website.models.core_models.AutoValidateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('semester_name', models.CharField(choices=[('SPRING', 'Spring'), ('SUMMER', 'Summer'), ('FALL', 'Fall')], max_length=8)),
                ('semester_year', models.IntegerField()),
            ],
            bases=(website.models.core_models.AutoValidateMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Instructor',
            fields=[
                ('instructor_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_instructor', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('instructor_type', models.CharField(choices=[('TA', 'Teaching Assistant'), ('PROF', 'Professor')], max_length=4)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('student_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='user_student', serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='semester',
            constraint=models.UniqueConstraint(fields=('semester_name', 'semester_year'), name='unique_semester'),
        ),
        migrations.AddField(
            model_name='registration',
            name='reg_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.class'),
        ),
        migrations.AddField(
            model_name='registration',
            name='reg_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='officehoursession',
            name='ohs_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.class'),
        ),
        migrations.AddField(
            model_name='officehoursession',
            name='ohs_location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.location'),
        ),
        migrations.AddField(
            model_name='officehourquestion',
            name='ohq_assignment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='website.assignment'),
        ),
        migrations.AddField(
            model_name='officehourquestion',
            name='ohq_ohs',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.officehoursession'),
        ),
        migrations.AddField(
            model_name='officehourquestion',
            name='ohq_topics',
            field=models.ManyToManyField(to='website.coursetopic'),
        ),
        migrations.AddField(
            model_name='coursetopic',
            name='course_topic_course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.course'),
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.UniqueConstraint(fields=('course_subject', 'course_catalog_number'), name='unique_course'),
        ),
        migrations.AddField(
            model_name='class',
            name='class_course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.course'),
        ),
        migrations.AddField(
            model_name='class',
            name='class_semester',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.semester'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='assignment_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.class'),
        ),
        migrations.AddField(
            model_name='assignment',
            name='assignment_topics',
            field=models.ManyToManyField(to='website.coursetopic'),
        ),
        migrations.AddField(
            model_name='universitymember',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='universitymember',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('prof_instructor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='instructor_professor', serialize=False, to='website.instructor')),
            ],
        ),
        migrations.CreateModel(
            name='TeachingAssistant',
            fields=[
                ('ta_instructor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='instructor_ta', serialize=False, to='website.instructor')),
            ],
        ),
        migrations.AddField(
            model_name='officehoursession',
            name='ohs_instructor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.instructor'),
        ),
        migrations.AddField(
            model_name='officehourquestion',
            name='ohq_student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.student'),
        ),
        migrations.AddConstraint(
            model_name='coursetopic',
            constraint=models.UniqueConstraint(fields=('course_topic_course', 'course_topic_name'), name='unique_course_topic'),
        ),
        migrations.AddConstraint(
            model_name='assignment',
            constraint=models.UniqueConstraint(fields=('assignment_name', 'assignment_class'), name='unique_assignment'),
        ),
    ]
